#!/usr/bin/env ruby
require_relative "../lib/ferret"
bash(name: :setup, timeout:50, stdin: <<-'EESTD')
  gem install sequel
  gem install pg
EESTD

require 'sequel'
require 'resolv'



#bash(name: :clean, timeout:50,stdin: <<-'EESTD')
#  heroku apps:delete --app $SERVICE_APP_NAME --confirm $SERVICE_APP_NAME
#  heroku create $SERVICE_APP_NAME
#  heroku addons:add heroku-postgresql --app $SERVICE_APP_NAME 
#EESTD

run_interval 10 do 
  exit 1
end

run_every_time do
  test name: :tryresolve, timeout:200 do |source|
    ENV['DATABASE_URL'] =`heroku config --app $SERVICE_APP_NAME | awk '/HEROKU_POSTGRESQL/ {print $2;}'`
    uri = URI.parse(ENV['DATABASE_URL'])
    host = uri.host
    begin
      private_ip = Resolv.getaddress(host) 
    rescue => e
      log source: source, error:e.message
      log source: source, backtrace:e.backtrace.join("\n")
    end
    log source: source, servhostname: "#{host}"
    log source: source, dynohostname: "#{`hostname`}"
    log source: source, servip: "#{private_ip}"
    log source: source, dynoinet: "#{`/sbin/ifconfig | grep "inet addr:" | grep -v 127.0.0.1`}"
    t1 = Thread.new do
      begin
        db1 = Sequel.connect(ENV['DATABASE_URL']) 
        log source: source, connhostname: "#{db1.test_connection}"
        db1.disconnect
      rescue => e
        log source: source, error:e.message
        log source: source, backtrace:e.backtrace.join("\n")
        next 1
      end
    end
    uri.host = private_ip
    t2 = Thread.new do
      begin
        db2 = Sequel.connect(uri.to_s)
        log source:source, connip: "#{db2.test_connection}"
        db2.disconnect
      rescue => e
        log source: source, error:e.message
        log source: source, backtrace:e.backtrace.join("\n")
        next 1
      end
    end
    [t1, t2].each(&:join)
    next 0
  end
end

run forever: true