#!/usr/bin/env ruby
require "bundler"
Bundler.setup

require "cgi"
require "librato/metrics"
require "uri"

require_relative "../lib/ferret"

uri = URI.parse(ENV["LIBRATO_API_URL"])
Librato::Metrics.authenticate CGI.unescape(uri.user), uri.password

def sum(metric, opts={})
  opts[:duration]   ||= 600
  opts[:end_time]   ||= Time.now

  begin
    m = Librato::Metrics.fetch(metric,
      end_time:   opts[:end_time],
      start_time: opts[:end_time] - opts[:duration],
      summarize_time: true,
      summarize_sources: true
    )
    m.empty? ? 0 : m["all"][0]["sum"]
  rescue Librato::Metrics::NotFound
    0
  end
end

def avail(metric, opts={})
  opts[:duration] ||= 600

  s = sum("#{metric}.success.count", opts)
  f = sum("#{metric}.failure.count", opts)
  s.to_f / (s + f) * 100
end

def mean_time(metric, opts={})
  opts[:duration] ||= 600

  s = sum("#{metric}.success.mean", opts)
end

metrics = [
  ["#{ENV["ORG"]}.dashboard_oauth_redirect.redirect", duration: 600],
  ["#{ENV["ORG"]}.git_clone.clone",                   duration: 600],
  ["#{ENV["ORG"]}.git_clone_bamboo.clone",            duration: 600],
  ["#{ENV["ORG"]}.git_clone_elb.clone",               duration: 600],
  ["#{ENV["ORG"]}.exec_converge.poll",                duration: 3600],
  ["#{ENV["ORG"]}.exec_run.run",                      duration: 600],
]

metrics.each do |m,opts|
  fn = m.split(".")[1]
  log(val: avail(m,opts), measure: "#{fn}.avail")
end
